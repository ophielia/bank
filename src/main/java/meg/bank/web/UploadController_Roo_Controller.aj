// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package meg.bank.web;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import meg.bank.bus.dao.MediaUploadDao;
import meg.bank.web.UploadController;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect UploadController_Roo_Controller {
    
    @RequestMapping(params = "form", produces = "text/html")
    public String UploadController.createForm(Model uiModel) {
        populateEditForm(uiModel, new MediaUploadDao());
        return "import/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String UploadController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("mediauploaddao", mediaUploadRepository.findOne(id));
        uiModel.addAttribute("itemId", id);
        return "import/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String UploadController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("mediauploaddaos", mediaUploadRepository.findAll(new org.springframework.data.domain.PageRequest(firstResult / sizeNo, sizeNo)).getContent());
            float nrOfPages = (float) mediaUploadRepository.count() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("mediauploaddaos", mediaUploadRepository.findAll());
        }
        return "import/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String UploadController.update(@Valid MediaUploadDao mediaUploadDao, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, mediaUploadDao);
            return "import/update";
        }
        uiModel.asMap().clear();
        mediaUploadRepository.save(mediaUploadDao);
        return "redirect:/import/" + encodeUrlPathSegment(mediaUploadDao.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String UploadController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, mediaUploadRepository.findOne(id));
        return "import/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String UploadController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        MediaUploadDao mediaUploadDao = mediaUploadRepository.findOne(id);
        mediaUploadRepository.delete(mediaUploadDao);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/import";
    }
    
    void UploadController.populateEditForm(Model uiModel, MediaUploadDao mediaUploadDao) {
        uiModel.addAttribute("mediaUploadDao", mediaUploadDao);
    }
    
}
