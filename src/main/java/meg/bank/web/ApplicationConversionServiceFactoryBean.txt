package meg.bank.web;

import meg.bank.bus.dao.CategoryRuleDao;
import meg.bank.bus.dao.MediaUploadDao;
import meg.bank.bus.repo.CategoryRuleRepository;
import meg.bank.bus.repo.MediaUploadRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.core.convert.converter.Converter;
import org.springframework.format.FormatterRegistry;
import org.springframework.format.support.FormattingConversionServiceFactoryBean;

@Configurable
/**
 * A central place to register application converters and formatters. 
 */
public class ApplicationConversionServiceFactoryBean extends FormattingConversionServiceFactoryBean {

	@Override
	protected void installFormatters(FormatterRegistry registry) {
		super.installFormatters(registry);
		// Register application converters and formatters
	}

	@Autowired
    CategoryRuleRepository categoryRuleRepository;

	@Autowired
    MediaUploadRepository mediaUploadRepository;

	public Converter<CategoryRuleDao, String> getCategoryRuleDaoToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<meg.bank.bus.dao.CategoryRuleDao, java.lang.String>() {
            public String convert(CategoryRuleDao categoryRuleDao) {
                return new StringBuilder().append(categoryRuleDao.getLineorder()).append(' ').append(categoryRuleDao.getContaining()).append(' ').append(categoryRuleDao.getCategoryId()).append(' ').append(categoryRuleDao.getCatDisplay()).toString();
            }
        };
    }

	public Converter<Long, CategoryRuleDao> getIdToCategoryRuleDaoConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, meg.bank.bus.dao.CategoryRuleDao>() {
            public meg.bank.bus.dao.CategoryRuleDao convert(java.lang.Long id) {
                return categoryRuleRepository.findOne(id);
            }
        };
    }

	public Converter<String, CategoryRuleDao> getStringToCategoryRuleDaoConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, meg.bank.bus.dao.CategoryRuleDao>() {
            public meg.bank.bus.dao.CategoryRuleDao convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), CategoryRuleDao.class);
            }
        };
    }

	public Converter<MediaUploadDao, String> getMediaUploadDaoToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<meg.bank.bus.dao.MediaUploadDao, java.lang.String>() {
            public String convert(MediaUploadDao mediaUploadDao) {
                return new StringBuilder().append(mediaUploadDao.getFilepath()).append(' ').append(mediaUploadDao.getContentType()).append(' ').append(mediaUploadDao.getImportClient()).toString();
            }
        };
    }

	public Converter<Long, MediaUploadDao> getIdToMediaUploadDaoConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, meg.bank.bus.dao.MediaUploadDao>() {
            public meg.bank.bus.dao.MediaUploadDao convert(java.lang.Long id) {
                return mediaUploadRepository.findOne(id);
            }
        };
    }

	public Converter<String, MediaUploadDao> getStringToMediaUploadDaoConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, meg.bank.bus.dao.MediaUploadDao>() {
            public meg.bank.bus.dao.MediaUploadDao convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), MediaUploadDao.class);
            }
        };
    }

	public void installLabelConverters(FormatterRegistry registry) {
        registry.addConverter(getCategoryRuleDaoToStringConverter());
        registry.addConverter(getIdToCategoryRuleDaoConverter());
        registry.addConverter(getStringToCategoryRuleDaoConverter());
        registry.addConverter(getMediaUploadDaoToStringConverter());
        registry.addConverter(getIdToMediaUploadDaoConverter());
        registry.addConverter(getStringToMediaUploadDaoConverter());
    }

	public void afterPropertiesSet() {
        super.afterPropertiesSet();
        installLabelConverters(getObject());
    }
}
