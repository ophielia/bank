// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package meg.bank.bus.dao;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import meg.bank.bus.dao.ExpenseDao;
import meg.bank.bus.dao.ExpenseDaoDataOnDemand;
import meg.bank.bus.repo.ExpenseRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ExpenseDaoDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ExpenseDaoDataOnDemand: @Component;
    
    private Random ExpenseDaoDataOnDemand.rnd = new SecureRandom();
    
    private List<ExpenseDao> ExpenseDaoDataOnDemand.data;
    
    @Autowired
    ExpenseRepository ExpenseDaoDataOnDemand.expenseRepository;
    
    public ExpenseDao ExpenseDaoDataOnDemand.getNewTransientExpenseDao(int index) {
        ExpenseDao obj = new ExpenseDao();
        setCatName(obj, index);
        setCatamount(obj, index);
        setCatid(obj, index);
        setCattransid(obj, index);
        setComment(obj, index);
        setDeleted(obj, index);
        setDescription(obj, index);
        setDetail(obj, index);
        setDispCat(obj, index);
        setHascat(obj, index);
        setMonth(obj, index);
        setNonexpense(obj, index);
        setSource(obj, index);
        setTransdate(obj, index);
        setTransid(obj, index);
        setTranstotal(obj, index);
        setYear(obj, index);
        return obj;
    }
    
    public void ExpenseDaoDataOnDemand.setCatName(ExpenseDao obj, int index) {
        String catName = "catName_" + index;
        obj.setCatName(catName);
    }
    
    public void ExpenseDaoDataOnDemand.setCatamount(ExpenseDao obj, int index) {
        Double catamount = new Integer(index).doubleValue();
        obj.setCatamount(catamount);
    }
    
    public void ExpenseDaoDataOnDemand.setCatid(ExpenseDao obj, int index) {
        Long catid = new Integer(index).longValue();
        obj.setCatid(catid);
    }
    
    public void ExpenseDaoDataOnDemand.setCattransid(ExpenseDao obj, int index) {
        Long cattransid = new Integer(index).longValue();
        obj.setCattransid(cattransid);
    }
    
    public void ExpenseDaoDataOnDemand.setComment(ExpenseDao obj, int index) {
        String comment = "comment_" + index;
        obj.setComment(comment);
    }
    
    public void ExpenseDaoDataOnDemand.setDeleted(ExpenseDao obj, int index) {
        Boolean deleted = Boolean.TRUE;
        obj.setDeleted(deleted);
    }
    
    public void ExpenseDaoDataOnDemand.setDescription(ExpenseDao obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void ExpenseDaoDataOnDemand.setDetail(ExpenseDao obj, int index) {
        String detail = "detail_" + index;
        obj.setDetail(detail);
    }
    
    public void ExpenseDaoDataOnDemand.setDispCat(ExpenseDao obj, int index) {
        String dispCat = "dispCat_" + index;
        obj.setDispCat(dispCat);
    }
    
    public void ExpenseDaoDataOnDemand.setHascat(ExpenseDao obj, int index) {
        Boolean hascat = Boolean.TRUE;
        obj.setHascat(hascat);
    }
    
    public void ExpenseDaoDataOnDemand.setMonth(ExpenseDao obj, int index) {
        String month = "month_" + index;
        obj.setMonth(month);
    }
    
    public void ExpenseDaoDataOnDemand.setNonexpense(ExpenseDao obj, int index) {
        Boolean nonexpense = Boolean.TRUE;
        obj.setNonexpense(nonexpense);
    }
    
    public void ExpenseDaoDataOnDemand.setSource(ExpenseDao obj, int index) {
        Integer source = new Integer(index);
        obj.setSource(source);
    }
    
    public void ExpenseDaoDataOnDemand.setTransdate(ExpenseDao obj, int index) {
        Date transdate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTransdate(transdate);
    }
    
    public void ExpenseDaoDataOnDemand.setTransid(ExpenseDao obj, int index) {
        Long transid = new Integer(index).longValue();
        obj.setTransid(transid);
    }
    
    public void ExpenseDaoDataOnDemand.setTranstotal(ExpenseDao obj, int index) {
        Double transtotal = new Integer(index).doubleValue();
        obj.setTranstotal(transtotal);
    }
    
    public void ExpenseDaoDataOnDemand.setYear(ExpenseDao obj, int index) {
        String year = "year_" + index;
        obj.setYear(year);
    }
    
    public ExpenseDao ExpenseDaoDataOnDemand.getSpecificExpenseDao(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ExpenseDao obj = data.get(index);
        Long id = obj.getId();
        return expenseRepository.findOne(id);
    }
    
    public ExpenseDao ExpenseDaoDataOnDemand.getRandomExpenseDao() {
        init();
        ExpenseDao obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return expenseRepository.findOne(id);
    }
    
    public boolean ExpenseDaoDataOnDemand.modifyExpenseDao(ExpenseDao obj) {
        return false;
    }
    
    public void ExpenseDaoDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = expenseRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ExpenseDao' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ExpenseDao>();
        for (int i = 0; i < 10; i++) {
            ExpenseDao obj = getNewTransientExpenseDao(i);
            try {
                expenseRepository.save(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            expenseRepository.flush();
            data.add(obj);
        }
    }
    
}
